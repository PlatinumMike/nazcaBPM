//
// Created by mike on 10/11/24.
//

#include "ModeHandler.h"

#include <boost/multi_array.hpp>
using boost::multi_array;
using boost::extents;


ModeHandler::ModeHandler(const std::string &source_type): type(source_type) {
}

// just some mock-up profile.
multi_array<std::complex<double>, 2> ModeHandler::get_initial_profile(const std::vector<double> &ygrid,
                                                                      const std::vector<double> &zgrid, const double y0,
                                                                      const double z0, const double std_y,
                                                                      const double std_z) const {
    //todo: in the future this would be read from a file, which is generated by a mode solver, e.g. WGMS3D.
    //still it is convenient to keep to keep this mockup profile. Maybe handy as initial profile for mode finding (imaginary distance BPM).

    const int numy = static_cast<int>(ygrid.size());
    const int numz = static_cast<int>(zgrid.size());
    multi_array<std::complex<double>, 2> initial_profile(extents[numy][numz]);
    std::complex<double> value = {0.0, 0.0};
    // normalize such that the integral of |u|^2 is 1.
    const double amplitude = std::sqrt(1.0 / (std::numbers::pi * std_y * std_z));

    double y = 0.0;
    double z = 0.0;
    for (int idy = 0; idy < numy; idy++) {
        for (int idz = 0; idz < numz; idz++) {
            if (idy == 0 || idy == numy - 1 || idz == 0 || idz == numz - 1) {
                //set boundary values to zero. Simple Dirichlet BCs. Reflections are negligible since a PML will be placed in front of the metal wall anyway.
                value = {0.0, 0.0};
            } else {
                y = ygrid[idy];
                z = zgrid[idz];
                double deltay = (y - y0) / std_y;
                double deltaz = (z - z0) / std_z;
                value = {amplitude * std::exp(-0.5 * deltay * deltay - 0.5 * deltaz * deltaz), 0.0};
            }
            initial_profile[idy][idz] = value;
        }
    }
    return initial_profile;
}
